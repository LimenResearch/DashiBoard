function csv_reader(
        N::Integer;
        allow_quoted_nulls::Bool = true,
        auto_detect::Bool = true,
        auto_type_candidates::Maybe{StringList} = nothing,
        columns::Maybe{StringStruct} = nothing,
        compression::Maybe{AbstractString} = nothing,
        dateformat::Maybe{AbstractString} = nothing,
        decimal_separator::AbstractString = ".",
        delim::AbstractString = ",",
        escape::AbstractString = "\"",
        filename::Bool = false,
        force_not_null::StringList = String[],
        header::Bool = true,
        hive_partitioning::Bool = false,
        ignore_errors::Bool = false,
        max_line_size::Integer = 2097152,
        names::Maybe{StringList} = nothing,
        new_line::Maybe{AbstractString} = nothing,
        normalize_names::Bool = false,
        null_padding::Bool = false,
        nullstr::Maybe{Union{AbstractString, StringList}} = nothing,
        parallel::Bool = true,
        quotestr::AbstractString = "\"",
        sample_size::Integer = 20480,
        skip::Integer = 0,
        timestampformat::Maybe{AbstractString} = nothing,
        types::Maybe{Union{StringList, StringStruct}} = nothing,
        union_by_name::Bool = false,
    )

    options = Dict{String, Any}(
        "allow_quoted_nulls" => allow_quoted_nulls,
        "auto_detect" => auto_detect,
        "auto_type_candidates" => auto_type_candidates,
        "columns" => columns,
        "compression" => compression,
        "dateformat" => dateformat,
        "decimal_separator" => decimal_separator,
        "delim" => delim,
        "escape" => escape,
        "filename" => filename,
        "force_not_null" => force_not_null,
        "header" => header,
        "hive_partitioning" => hive_partitioning,
        "ignore_errors" => ignore_errors,
        "max_line_size" => max_line_size,
        "names" => names,
        "new_line" => new_line,
        "normalize_names" => normalize_names,
        "null_padding" => null_padding,
        "nullstr" => nullstr,
        "parallel" => parallel,
        "quote" => quotestr,
        "sample_size" => sample_size,
        "skip" => skip,
        "timestampformat" => timestampformat,
        "types" => types,
        "union_by_name" => union_by_name,
    )

    return reader_call("read_csv", N, options)
end
