var documenterSearchIndex = {"docs":
[{"location":"ui-guide/#UI-Guide","page":"UI Guide","title":"UI Guide","text":"","category":"section"},{"location":"ui-guide/#Home-screen","page":"UI Guide","title":"Home screen","text":"","category":"section"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"After opening the browser at the starting page (see Getting Started), you will be greeted by the following page.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"(Image: UI home page)","category":"page"},{"location":"ui-guide/#Loading-data","page":"UI Guide","title":"Loading data","text":"","category":"section"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"To load data, simply select one or more files from the \"Choose files\" dropdown.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"You will have access to all the files available in you data directory, provided that their format is supported. See also DataIngestion.is_supported.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"(Image: UI file selection)","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"Upon pressing the Load button, the data is loaded in the Source table, displayed on the top right.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"(Image: loaded data)","category":"page"},{"location":"ui-guide/#Filtering-data","page":"UI Guide","title":"Filtering data","text":"","category":"section"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"The Filter tab allows users to filter their data. At the moment, we support checkboxes for categorical columns and min / max selectors for continuous ones.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"Upon clicking on Submit, the filtered data is loaded in the Selection table, displayed on the bottom right.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"(Image: filtered data)","category":"page"},{"location":"ui-guide/#Processing-data","page":"UI Guide","title":"Processing data","text":"","category":"section"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"Data is processed via cards, small building blocks that add new columns to the  filtered data.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"To add a new card, click on the ï¼‹ and select the type of card you wish to add.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"(Image: adding a new card)","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"You can add and compile as many cards as you wish.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"Upon clicking on Submit, the additional columns are added to the Selection table.","category":"page"},{"location":"ui-guide/","page":"UI Guide","title":"UI Guide","text":"(Image: processed data)","category":"page"},{"location":"lib/DataIngestion/#DataIngestion","page":"DataIngestion API","title":"DataIngestion","text":"","category":"section"},{"location":"lib/DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"CurrentModule = DataIngestion","category":"page"},{"location":"lib/DataIngestion/#Ingestion-interface","page":"DataIngestion API","title":"Ingestion interface","text":"","category":"section"},{"location":"lib/DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"DataIngestion.is_supported\nDataIngestion.load_files","category":"page"},{"location":"lib/DataIngestion/#DataIngestion.is_supported","page":"DataIngestion API","title":"DataIngestion.is_supported","text":"is_supported(file::AbstractString)\n\nDenote whether a file is of one of the available formats:\n\ncsv,\ntsv,\ntxt,\njson,\nparquet.\n\n\n\n\n\n","category":"function"},{"location":"lib/DataIngestion/#DataIngestion.load_files","page":"DataIngestion API","title":"DataIngestion.load_files","text":"load_files(\n    repository::Repository, files::AbstractVector{<:AbstractString},\n    [format::AbstractString]\n)\n\nLoad files into a table called TABLE_NAMES.source inside repository.db. The format is inferred or can be passed explicitly.\n\nThe following formats are supported:\n\ncsv,\ntsv,\ntxt,\njson,\nparquet.\n\n\n\n\n\n","category":"function"},{"location":"lib/DataIngestion/#Selection-interface","page":"DataIngestion API","title":"Selection interface","text":"","category":"section"},{"location":"lib/DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"Filters\nDataIngestion.select","category":"page"},{"location":"lib/DataIngestion/#DataIngestion.Filters","page":"DataIngestion API","title":"DataIngestion.Filters","text":"struct Filters\n    filters::Vector{AbstractFilter}\nend\n\nContainer for a list of filters.\n\n\n\n\n\n","category":"type"},{"location":"lib/DataIngestion/#DataIngestion.select","page":"DataIngestion API","title":"DataIngestion.select","text":"select(filters::Filters, repo::Repository)\n\nCreate a table with name TABLE_NAMES.selection within the database repo.db based on rows from the table TABLE_NAMES.source that are kept by the filters in filters.\n\nSee also Filters and Repository.\n\n\n\n\n\n","category":"function"},{"location":"lib/DataIngestion/#Filters","page":"DataIngestion API","title":"Filters","text":"","category":"section"},{"location":"lib/DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"DataIngestion.IntervalFilter\nDataIngestion.ListFilter","category":"page"},{"location":"lib/DataIngestion/#DataIngestion.IntervalFilter","page":"DataIngestion API","title":"DataIngestion.IntervalFilter","text":"struct IntervalFilter{T} <: AbstractFilter\n    colname::String\n    interval::ClosedInterval{T}\nend\n\nObject to retain only those rows for which the variable colname lies inside the interval.\n\n\n\n\n\n","category":"type"},{"location":"lib/DataIngestion/#DataIngestion.ListFilter","page":"DataIngestion API","title":"DataIngestion.ListFilter","text":"struct ListFilter{T} <: AbstractFilter\n    colname::String\n    list::Vector{T}\nend\n\nObject to retain only those rows for which the variable colname belongs to a list of options.\n\n\n\n\n\n","category":"type"},{"location":"lib/DataIngestion/#Metadata-for-filter-generation","page":"DataIngestion API","title":"Metadata for filter generation","text":"","category":"section"},{"location":"lib/DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"DataIngestion.summarize","category":"page"},{"location":"lib/DataIngestion/#DataIngestion.summarize","page":"DataIngestion API","title":"DataIngestion.summarize","text":"summarize(repo::Repository, tbl::AbstractString)\n\nCompute summaries of variables in table tbl within the database repo.db. The summary of a variable depends on its type, according to the following rules.\n\nCategorical variable => list of unique types.\nContinuous variable => extrema.\n\n\n\n\n\n","category":"function"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"DashiBoard is still in development, thus installing requires a few passages.","category":"page"},{"location":"getting-started/#Installation-dependencies","page":"Getting Started","title":"Installation dependencies","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Julia programming language (minimum version 1.11, installable via juliaup).\nJavaScript package manager pnpm.","category":"page"},{"location":"getting-started/#Launching-the-server","page":"Getting Started","title":"Launching the server","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Open a terminal at the top-level of the repository.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Install all required dependencies with the following command:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using Pkg; Pkg.add(Pkg.PackageSpec(name=\"DuckDB\", rev=\"main\")); Pkg.instantiate()'","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Then, launch the server with the following command:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"julia --project bin/launch.jl path/to/data","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"where path/to/data represents the data folder you wish to make accessible to DashiBoard.","category":"page"},{"location":"getting-started/#Launching-the-frontend","page":"Getting Started","title":"Launching the frontend","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Open a terminal in the dashiboard folder.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Install all required dependencies with the following command:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"pnpm install","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Then, launch the frontend with the following command:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"pnpm run start","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"To interact with the UI, open your browser and navigate to the page http://localhost:3000.","category":"page"},{"location":"lib/Pipelines/#Pipelines","page":"Pipelines API","title":"Pipelines","text":"","category":"section"},{"location":"lib/Pipelines/#Transformation-interface","page":"Pipelines API","title":"Transformation interface","text":"","category":"section"},{"location":"lib/Pipelines/","page":"Pipelines API","title":"Pipelines API","text":"Pipelines.Cards\nPipelines.evaluate","category":"page"},{"location":"lib/Pipelines/#Pipelines.Cards","page":"Pipelines API","title":"Pipelines.Cards","text":"struct Cards\n    cards::Vector{AbstractCard}\nend\n\nContainer for a list of cards.\n\n\n\n\n\n","category":"type"},{"location":"lib/Pipelines/#Pipelines.evaluate","page":"Pipelines API","title":"Pipelines.evaluate","text":"evaluate(cards::Cards, repo::Repository, table::AbstractString)\n\nReplace table in the database repo.db with the outcome of executing all the transformations in cards.\n\n\n\n\n\n","category":"function"},{"location":"lib/Pipelines/#Cards","page":"Pipelines API","title":"Cards","text":"","category":"section"},{"location":"lib/Pipelines/","page":"Pipelines API","title":"Pipelines API","text":"Pipelines.RescaleCard\nPipelines.SplitCard","category":"page"},{"location":"lib/Pipelines/#Pipelines.RescaleCard","page":"Pipelines API","title":"Pipelines.RescaleCard","text":"struct RescaleCard <: AbstractCard\n    method::String\n    by::Vector{String}\n    columns::Vector{String}\n    suffix::String\nend\n\nCard to rescale of one or more columns according to a given method. The supported methods are\n\nzscore,\nmaxabs,\nminmax,\nlog,\nlogistic.\n\nThe resulting rescaled variable is added to the table under the name \"$(originalname)_$(suffix)\". \n\n\n\n\n\n","category":"type"},{"location":"lib/Pipelines/#Pipelines.SplitCard","page":"Pipelines API","title":"Pipelines.SplitCard","text":"struct SplitCard <: AbstractCard\n    method::String\n    order_by::Vector{String}\n    by::Vector{String}\n    output::String\n    p::Float64\n    tiles::Vector{Int}\nend\n\nCard to split the data into two groups according to a given method.\n\nCurrently supported methods are\n\ntiles (requires tiles argument, e.g., tiles = [1, 1, 2, 1, 1, 2]),\npercentile (requires p argument, e.g. p = 0.9).\n\n\n\n\n\n","category":"type"},{"location":"#Overview-of-DashiBoard","page":"Overview","title":"Overview of DashiBoard","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"DashiBoard is a data visualization GUI written in the Julia programming language.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The backend is powered by three libraries:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"DuckDBUtils,\nDataIngestion,\nPipelines.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The frontend is powered by SolidJS.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"To see how to get started, proceed to the next section.","category":"page"},{"location":"lib/DuckDBUtils/#DuckDBUtils","page":"DuckDBUtils API","title":"DuckDBUtils","text":"","category":"section"},{"location":"lib/DuckDBUtils/","page":"DuckDBUtils API","title":"DuckDBUtils API","text":"CurrentModule = DuckDBUtils","category":"page"},{"location":"lib/DuckDBUtils/#Database-interface","page":"DuckDBUtils API","title":"Database interface","text":"","category":"section"},{"location":"lib/DuckDBUtils/","page":"DuckDBUtils API","title":"DuckDBUtils API","text":"Repository\nget_catalog\nacquire_connection\nrelease_connection\nwith_connection\nwith_table","category":"page"},{"location":"lib/DuckDBUtils/#DuckDBUtils.Repository","page":"DuckDBUtils API","title":"DuckDBUtils.Repository","text":"Repository(db::DuckDB.DB)\n\nConstruct a Repository object that holds a DuckDB.DB as well as a pool of connections.\n\nUse DBInterface.(f::Base.Callable, repo::Repository, sql::AbstractString, [params]) to run a function on the result of a query sql on an available connection in the pool.\n\n\n\n\n\n","category":"type"},{"location":"lib/DuckDBUtils/#DuckDBUtils.get_catalog","page":"DuckDBUtils API","title":"DuckDBUtils.get_catalog","text":"get_catalog(repo::Repository; schema = nothing)\n\nExtract the catalog of available tables from a Repository repo.\n\n\n\n\n\n","category":"function"},{"location":"lib/DuckDBUtils/#DuckDBUtils.acquire_connection","page":"DuckDBUtils API","title":"DuckDBUtils.acquire_connection","text":"acquire_connection(repo::Repository)\n\nAcquire an open connection to the database repo.db from the pool repo.pool. See also release_connection.\n\nnote: Note\nA command con = acquire_connection(repo) must always be followed by a matching command release_connection(repo, con) (after the connection has been used).\n\n\n\n\n\n","category":"function"},{"location":"lib/DuckDBUtils/#DuckDBUtils.release_connection","page":"DuckDBUtils API","title":"DuckDBUtils.release_connection","text":"release_connection(repo::Repository, con)\n\nRelease connection con to the pool repo.pool\n\n\n\n\n\n","category":"function"},{"location":"lib/DuckDBUtils/#DuckDBUtils.with_connection","page":"DuckDBUtils API","title":"DuckDBUtils.with_connection","text":"with_connection(f, repo::Repository, [N])\n\nAcquire a connection con from the pool repo.pool. Then, execute f(con) and release the connection to the pool. An optional parameter N can be passed to determine the number of connections to be acquired (defaults to 1).\n\n\n\n\n\n","category":"function"},{"location":"lib/DuckDBUtils/#DuckDBUtils.with_table","page":"DuckDBUtils API","title":"DuckDBUtils.with_table","text":"with_table(f, repo::Repository, table)\n\nRegister a table under a random unique name name, apply f(name), and then unregister the table.\n\n\n\n\n\n","category":"function"},{"location":"lib/DuckDBUtils/#Batched-iteration","page":"DuckDBUtils API","title":"Batched iteration","text":"","category":"section"},{"location":"lib/DuckDBUtils/","page":"DuckDBUtils API","title":"DuckDBUtils API","text":"Batches","category":"page"},{"location":"lib/DuckDBUtils/#DuckDBUtils.Batches","page":"DuckDBUtils API","title":"DuckDBUtils.Batches","text":"struct Batches{T}\n    chunks::T\n    batchsize::Int\n    nrows::Int\nend\n\nLet chunks be a partitioned table with nrows in total. Then, return an iterator of column-based tables with batchsize rows each.\n\nnote: Note\nchunks can in general be obtained as the output of Tables.partitions.\n\n\n\n\n\n","category":"type"},{"location":"lib/DuckDBUtils/#Internal-functions","page":"DuckDBUtils API","title":"Internal functions","text":"","category":"section"},{"location":"lib/DuckDBUtils/","page":"DuckDBUtils API","title":"DuckDBUtils API","text":"DuckDBUtils._numobs\nDuckDBUtils._init\nDuckDBUtils._append!","category":"page"},{"location":"lib/DuckDBUtils/#DuckDBUtils._numobs","page":"DuckDBUtils API","title":"DuckDBUtils._numobs","text":"_numobs(cols)\n\nCompute the number of rows of a column-based table cols.\n\n\n\n\n\n","category":"function"},{"location":"lib/DuckDBUtils/#DuckDBUtils._init","page":"DuckDBUtils API","title":"DuckDBUtils._init","text":"_init(cols)\n\nInitialize an empty table with the same schema as the column-based table cols.\n\n\n\n\n\n","category":"function"},{"location":"lib/DuckDBUtils/#DuckDBUtils._append!","page":"DuckDBUtils API","title":"DuckDBUtils._append!","text":"_append!(batch::AbstractDict, cols, rg = Colon())\n\nAppend rows rg of column-based table cols to the dict table batch.\n\n\n\n\n\n","category":"function"}]
}
