var documenterSearchIndex = {"docs":
[{"location":"ui-guide/#UI-Guide","page":"UI Guide","title":"UI Guide","text":"","category":"section"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"DashiBoard is still in development, thus installing requires a few passages.","category":"page"},{"location":"getting-started/#Installation-dependencies","page":"Getting Started","title":"Installation dependencies","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Julia programming language (minimum version 1.11, installable via juliaup).\nJavaScript package manager pnpm.","category":"page"},{"location":"getting-started/#Launching-the-server","page":"Getting Started","title":"Launching the server","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Open a terminal at the top-level of the repository.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Install all required dependencies with the following command:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using Pkg; Pkg.add(Pkg.PackageSpec(name=\"DuckDB\", rev=\"main\")); Pkg.instantiate()'","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Then, launch the server with the following command:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"julia --project bin/launch.jl --host=127.0.0.1 --port=8080","category":"page"},{"location":"getting-started/#Launching-the-frontend","page":"Getting Started","title":"Launching the frontend","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Open a terminal in the dashiboard folder, then run the following command:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"pnpm run dev","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"This will inform you that your browser has now access to the data in the folder dashiboard/data and will launch the UI frontend.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"To interact with the UI, open your browser and navigate to the page http://localhost:3000/.","category":"page"},{"location":"DataIngestion/#DataIngestion","page":"DataIngestion API","title":"DataIngestion","text":"","category":"section"},{"location":"DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"CurrentModule = DataIngestion","category":"page"},{"location":"DataIngestion/#Database-interface","page":"DataIngestion API","title":"Database interface","text":"","category":"section"},{"location":"DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"Repository","category":"page"},{"location":"DataIngestion/#DataIngestion.Repository","page":"DataIngestion API","title":"DataIngestion.Repository","text":"Repository(db::DuckDB.DB)\n\nConstruct a Repository object that holds a DuckDB.DB as well as a pool of connections.\n\nUse DBInterface.(f::Base.Callable, repo::Repository, sql::AbstractString, [params]) to run a function on the result of a query sql on an available connection in the pool.\n\n\n\n\n\n","category":"type"},{"location":"DataIngestion/#Ingestion-interface","page":"DataIngestion API","title":"Ingestion interface","text":"","category":"section"},{"location":"DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"DataIngestion.is_supported\nDataIngestion.load_files","category":"page"},{"location":"DataIngestion/#DataIngestion.is_supported","page":"DataIngestion API","title":"DataIngestion.is_supported","text":"is_supported(file::AbstractString)\n\nDenote whether a file can be read automatically.\n\n\n\n\n\n","category":"function"},{"location":"DataIngestion/#DataIngestion.load_files","page":"DataIngestion API","title":"DataIngestion.load_files","text":"load_files(\n    repository::Repository, files::AbstractVector{<:AbstractString},\n    [format::AbstractString]\n)\n\nLoad files into a table called TABLE_NAMES.source inside repository.db. The format is inferred or can be passed explicitly.\n\nSupported formats are\n\n\"csv\",\n\"tsv\",\n\"txt\",\n\"json\",\n\"parquet\".\n\n\n\n\n\n","category":"function"},{"location":"DataIngestion/#Selection-interface","page":"DataIngestion API","title":"Selection interface","text":"","category":"section"},{"location":"DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"Filters\nDataIngestion.select","category":"page"},{"location":"DataIngestion/#DataIngestion.Filters","page":"DataIngestion API","title":"DataIngestion.Filters","text":"struct Filters\n    filters::Vector{AbstractFilter}\nend\n\nContainer for a list of filters.\n\n\n\n\n\n","category":"type"},{"location":"DataIngestion/#DataIngestion.select","page":"DataIngestion API","title":"DataIngestion.select","text":"select(filters::Filters, repo::Repository)\n\nCreate a table with name TABLE_NAMES.selection within the database repo.db based on rows from the table TABLE_NAMES.source that are kept by the filters in filters.\n\nSee also Filters and Repository.\n\n\n\n\n\n","category":"function"},{"location":"DataIngestion/#Filters","page":"DataIngestion API","title":"Filters","text":"","category":"section"},{"location":"DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"DataIngestion.IntervalFilter\nDataIngestion.ListFilter","category":"page"},{"location":"DataIngestion/#DataIngestion.IntervalFilter","page":"DataIngestion API","title":"DataIngestion.IntervalFilter","text":"struct IntervalFilter{T} <: AbstractFilter\n    colname::String\n    interval::ClosedInterval{T}\nend\n\nObject to retain only those rows for which the variable colname lies inside the interval.\n\n\n\n\n\n","category":"type"},{"location":"DataIngestion/#DataIngestion.ListFilter","page":"DataIngestion API","title":"DataIngestion.ListFilter","text":"struct ListFilter{T} <: AbstractFilter\n    colname::String\n    list::Vector{T}\nend\n\nObject to retain only those rows for which the variable colname belongs to a list of options.\n\n\n\n\n\n","category":"type"},{"location":"DataIngestion/#Metadata-for-filter-generation","page":"DataIngestion API","title":"Metadata for filter generation","text":"","category":"section"},{"location":"DataIngestion/","page":"DataIngestion API","title":"DataIngestion API","text":"DataIngestion.summarize","category":"page"},{"location":"DataIngestion/#DataIngestion.summarize","page":"DataIngestion API","title":"DataIngestion.summarize","text":"summarize(repo::Repository, tbl::AbstractString)\n\nCompute summaries of variables in table tbl within the database repo.db. The summary of a variable depends on its type, according to the following rules.\n\nCategorical variable => list of unique types.\nContinuous variable => extrema.\n\n\n\n\n\n","category":"function"},{"location":"Pipelines/#Pipelines","page":"Pipelines API","title":"Pipelines","text":"","category":"section"},{"location":"Pipelines/#Transformation-interface","page":"Pipelines API","title":"Transformation interface","text":"","category":"section"},{"location":"Pipelines/","page":"Pipelines API","title":"Pipelines API","text":"Pipelines.Cards\nPipelines.evaluate","category":"page"},{"location":"Pipelines/#Pipelines.Cards","page":"Pipelines API","title":"Pipelines.Cards","text":"struct Cards\n    cards::Vector{AbstractCard}\nend\n\nContainer for a list of cards.\n\n\n\n\n\n","category":"type"},{"location":"Pipelines/#Pipelines.evaluate","page":"Pipelines API","title":"Pipelines.evaluate","text":"evaluate(cards::Cards, repo::Repository, table::AbstractString)\n\nReplace table in the database repo.db with the outcome of executing all the transformations in cards.\n\n\n\n\n\n","category":"function"},{"location":"Pipelines/#Cards","page":"Pipelines API","title":"Cards","text":"","category":"section"},{"location":"Pipelines/","page":"Pipelines API","title":"Pipelines API","text":"Pipelines.RescaleCard\nPipelines.SplitCard","category":"page"},{"location":"Pipelines/#Pipelines.RescaleCard","page":"Pipelines API","title":"Pipelines.RescaleCard","text":"struct RescaleCard <: AbstractCard\n    method::String\n    by::Vector{String}\n    columns::Vector{String}\n    suffix::String\nend\n\nCard to rescale of one or more columns according to a given method. The supported methods are\n\n\"zscore\",\n\"maxabs\",\n\"minmax\",\n\"log\",\n\"logistic\".\n\nThe resulting rescaled variable is added to the table under the name \"$(originalname)_$(suffix)\". \n\n\n\n\n\n","category":"type"},{"location":"Pipelines/#Pipelines.SplitCard","page":"Pipelines API","title":"Pipelines.SplitCard","text":"struct SplitCard <: AbstractCard\n    method::String\n    order_by::Vector{String}\n    by::Vector{String}\n    output::String\n    p::Float64\n    tiles::Vector{Int}\nend\n\nCard to split the data into two groups according to a given method.\n\nCurrently supported methods are\n\n\"tiles\" (requires tiles argument, e.g., tiles = [1, 1, 2, 1, 1, 2]),\n\"percentile\" (requires p argument, e.g. p = 0.9).\n\n\n\n\n\n","category":"type"},{"location":"#Overview-of-DashiBoard","page":"Overview","title":"Overview of DashiBoard","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"DashiBoard is a data visualization GUI written in the Julia programming language.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The backend is powered by two libraries:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Pipelines,\nDataIngestion.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The frontend is powered by SolidJS.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"To see how to get started, proceed to the next section.","category":"page"}]
}
